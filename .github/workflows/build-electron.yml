name: Build Electron App



on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            artifact: Copilot-Desktop-win
            outdir: dist/Copilot-Desktop-win32-x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact: Copilot-Desktop-linux
            outdir: dist/Copilot-Desktop-linux-x64
          - os: macos-latest
            platform: darwin
            arch: x64
            artifact: Copilot-Desktop-macos-x64
            outdir: dist/Copilot-Desktop-darwin-x64
          - os: macos-latest
            platform: darwin
            arch: arm64
            artifact: Copilot-Desktop-macos-arm64
            outdir: dist/Copilot-Desktop-darwin-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Package Electron app
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "win32" ]; then
            npm run package:win
            7z a dist/Copilot-Desktop-win.zip dist/Copilot-Desktop-win32-x64/*
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            npm run package:linux
            zip -r dist/Copilot-Desktop-linux.zip dist/Copilot-Desktop-linux-x64
          elif [ "${{ matrix.platform }}" = "darwin" ] && [ "${{ matrix.arch }}" = "x64" ]; then
            npm run package:mac:x64
            zip -r dist/Copilot-Desktop-macos-x64.zip dist/Copilot-Desktop-darwin-x64
          elif [ "${{ matrix.platform }}" = "darwin" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            npm run package:mac:arm64
            zip -r dist/Copilot-Desktop-macos-arm64.zip dist/Copilot-Desktop-darwin-arm64
          fi

      - name: Upload packaged app artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/${{ matrix.artifact }}.zip
          retention-days: 1

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Delete v0.0.1 release if present (for test/dev)
        if: github.ref_name == 'v0.0.1'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG="v0.0.1"
          REPO="${{ github.repository }}"
          echo "Deleting release for $TAG if it exists..."
          gh release delete "$TAG" --repo "$REPO" --yes || true

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Move all zip files to dist root for release upload
        run: |
          shopt -s globstar
          for f in dist/**/*.zip; do
            [ -f "$f" ] && mv "$f" dist/
          done

      - name: List files in dist for debugging
        run: |
          echo "Listing all files in dist after moving zips:"
          ls -lR dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          files: |
            dist/Copilot-Desktop-linux.zip
            dist/Copilot-Desktop-macos-arm64.zip
            dist/Copilot-Desktop-macos-x64.zip
            dist/Copilot-Desktop-win.zip

  delete-artifacts:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          expire-in: 0 # Setting this to 0 will delete all artifacts